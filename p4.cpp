//AUTHOR: Carl "Tommy" Zumstein
//FILENAME: p4.cpp
//DATE: 2/22/17
/*REVISION HISTORY:
*/
//PLATFORM:
//REFERENCES:

/*
DESCRIPTION:
p4 is a test driver for the blurtGens, blurtDub, and blurtSkip classes.
It performs two tests.
Test #1: showcases output generation and on/off state change 3 classes
Test #2: showcases reset functionality for each class
All input values are generated by random number generators
All objects tested are held in a heterogeneous collection following the pattern:
index 0: blurtGen
index 1: blurtSkip
index 2: blurtDub
*/

/*
Assumptions:
Heterogeneous collection is of size 20
genBlurtStr creates strings length 0 - 4
genBlurtState creates ints from 1 - 3
genblurtRepCount creates ints from 0 - 5
genGenBase creates ints from 20 - 50
genGenConst creates ints from 0 - 10
genGenLen creates ints from 1 - 16
genGenSkipOrDub creates ints from 1 to seqLength
Libraries used:
-iostream
-string
-cstlib
-ctime
*/

#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>

#include "blurtGens.h"
#include "blurtSkip.h"
#include "blurtDub.h"

using namespace std;

static const char ALPHABET[] = { 'A','B','C','D','E','F','G','H','I','J','K',
'L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z' };
static const int ALPHA_LEN = 26;
static const int STR_MAX_LEN = 4;
static const int BLURT_STATES = 3;
static const int MAX_REP_COUNT = 5;
static const int MAX_BASE = 50;
static const int MIN_BASE = 20;
static const int MAX_GEN_CONST = 10;
static const unsigned int MAX_GEN_LEN = 15;

static const int ARRAY_LEN = 20;
static const int TEST_LEN = 11;
static const int ID_MAX = 2;

string genBlurtStr() 
{
	string rndStr = "";
	int rndAlphaIndx = 0;
	int strLen = rand() % STR_MAX_LEN ;
	for (int i = 0; i <= strLen; i++)
	{
		rndAlphaIndx = rand() % ALPHA_LEN;
		rndStr += ALPHABET[rndAlphaIndx];
	}
	return rndStr;
}

int genBlurtState()
{
	return (rand() % BLURT_STATES) + 1;
}

int genBlurtRepCount()
{
	return rand() % MAX_REP_COUNT;
}

int genGenBase()
{
	return (rand() % (MAX_BASE - MIN_BASE)) + MIN_BASE;
}

int genGenConst()
{
	return (rand() % MAX_GEN_CONST) + 1;
}

unsigned int genGenLen()
{
	return (rand() % MAX_GEN_LEN) + 1;
}

unsigned int genGenSkipOrDub(unsigned int seqLength)
{
	return rand() % seqLength + 1;
}

blurtGens * genObj(int id, string rndBlurtStr, int rndState, int rndCount, int rndBase,
	int rndConst, unsigned int rndLen, unsigned int rndSkipOrDub)
{
	if (id == 0)
	{
		return new blurtGens(rndBlurtStr, rndState, rndCount, rndBase, 
			rndConst, rndLen);
	}
	else if (id == 1)
	{
		return new blurtSkip(rndBlurtStr, rndState, rndCount, rndBase,
			rndConst, rndLen, rndSkipOrDub);
	}
	else if (id == 2)
	{
		return new blurtDub(rndBlurtStr, rndState, rndCount, rndBase,
			rndConst, rndLen, rndSkipOrDub);
	}
}

int main()
{
	srand(time(0));
	
	//Generation of Test Data
	blurtGens * blurtGenArr[ARRAY_LEN];

	string blurtStrArr[ARRAY_LEN];
	int blurtStateArr[ARRAY_LEN];
	int blurtRepCountArr[ARRAY_LEN];
	int genBaseArr[ARRAY_LEN];
	int genConstArr[ARRAY_LEN];
	unsigned int genLenArr[ARRAY_LEN];
	unsigned int genSkipOrDubArr[ARRAY_LEN];

	for (int i = 0; i < ARRAY_LEN; i++) 
	{
		blurtStrArr[i] = genBlurtStr();
		blurtStateArr[i] = genBlurtState();
		blurtRepCountArr[i] = genBlurtRepCount();
		genBaseArr[i] = genGenBase();
		genConstArr[i] = genGenConst();
		genLenArr[i] = genGenLen();
		genSkipOrDubArr[i] = genGenSkipOrDub(genLenArr[i]);
	}

	int id = 0;

	for (int i = 0; i < ARRAY_LEN; i++)
	{
		blurtGenArr[i] = genObj(id, blurtStrArr[i], blurtStateArr[i], blurtRepCountArr[i],
			genBaseArr[i], genConstArr[i], genLenArr[i], genSkipOrDubArr[i]);
		id++;
		if (id > ID_MAX) 
		{
			id = 0;
		}
	}

	//Welcome Message
	cout << "Welcome to the P4 test driver!" << endl;
	cout << "This driver tests the functionality of the blurtGens, blurtDub, and blurtSkip classes." << endl;
	cout << "Two tests will be performed." << endl;
	cout << "Test 1: tests the output and on/off state functionality of all classes" << endl;
	cout << "Test 2: tests the reset functionality of all classes" << endl;
	cout << "Press enter to begin Test 1" << endl;
	cin.ignore();
	cout << endl << endl << endl;

	//Test #1
	cout << "Test 1: " << endl;
	cout << "----------------------------------------------------" << endl;
	for (int j = 0; j < ARRAY_LEN; j++)
	{
		cout << "Object #: " << j << endl;
		for (int i = 0; i < TEST_LEN; i++)
		{
			cout << "Run #: " << i << endl;
			cout << "Output: " << blurtGenArr[j]->combinedOutput() << endl << endl;
		}
		cout << endl << endl;
	}

	cout << "Test 1 complete. Press enter to begin test 2." << endl;
	cin.ignore();
	cout << endl << endl << endl;

	//Test #2
	cout << "Test 2: " << endl;
	cout << "----------------------------------------------------" << endl;
	cout << "Resetting all objects in blurtGens Array." << endl;
	for (int i = 0; i < ARRAY_LEN; i++) 
	{
		blurtGenArr[i]->reset();
		cout << "Object #: " << i << endl;
		cout << "Output: " << blurtGenArr[i]->combinedOutput() << endl << endl;
	}

	cout << "Tests complete. Press enter to exit." << endl;
	cin.ignore();
	
	return 0;
	
}